import tensorflow as tf
import numpy as np
import sys,os,glob
import json
import argparse
import matplotlib.pyplot as plt
from collections import namedtuple

message = 'Identification of inclusion parameters using ML\
 Nachiket Gokhale gokhalen@gmail.com'

# ':' means size of training examples
# binary = [:] 1/0 (inclusion/no inclusion)
# center = [:,2] (x and y co-ordinates of the center)
# radius = [:] list of inclusion radius
# 
Labels=namedtuple('Labels',['binary','center','radius','value','field'])
CNNData=namedtuple('CNNData',['image','labels'])

def get_args():
    parser = argparse.ArgumentParser(description=message)
    
    parser.add_argument('--inputfile',help='input file generated by mlsetup',
                        required=False,default='mlargs.json.out',type=str)
    parser.add_argument('--mltype',help='type of ml to do',required=False,default='binary',
                        choices=['binary','location','radius','value','fullip'])
    
    parser.add_argument('--ntrain',help='number of training examples to generate',
                        required=False,type=int)
    parser.add_argument('--nvalid',help='number of validation examples to generate',
                        required=False,type=int)
    parser.add_argument('--ntest', help='number of test examples to generate',
                        required=False,type=int)

    parser.add_argument('--prefix', help='prefix of data directories',
                        required=False,type=str,default='traindata')

    args = parser.parse_args()
    return args

def get_params(fname):
    # loads config file created by mlsetup reads variables and returns them as a dictionary
    with open(fname,'r') as fin:
        jj=json.load(fin)
    return jj

def update_params(params,args):
    # returns an upadated parameter dictionary.
    # if parameter values are specified as arguments on the command line then the
    # appropriate values in params are replaced
    newparams = params.copy()
    if (args.ntrain != None): newparams['ntrain'] = args.ntrain
    if (args.nvalid != None): newparams['nvalid'] = args.nvalid
    if (args.ntest  != None): newparams['ntest']  = args.ntest

    if (args.ntrain != None) or (args.nvalid !=None) or (args.ntest != None):
        newparams['ntotal'] = newparams['ntrain'] + newparams['nvalid'] + newparams['ntest']
        
    return newparams

def get_data(params):
    # reads training,validation and test data and returns it
    # prefix is the prefix of the directories which contain training validation and test data
    # ntrain,nvalid,ntest are integers and should sum up to less than the number of files
    # returned by glob
    # train_data is a namedtuple with four components image,label,center,value,radius
    
    train_data,valid_data,test_data = None,None,None
    # https://stackoverflow.com/questions/973473/getting-a-list-of-all-subdirectories-in-the-current-directory?rq=1
    # Udit Bansal's answer
    gg = glob.glob(f'{params["prefix"]}*/')  # get directories starting with prefix

    ntotal = len(gg);
    ntrain = params['ntrain'];
    nvalid = params['nvalid'];
    ntest  = params['ntest'];
    prefix = params['prefix'];
    nnodex = params['nelemx']+1;
    nnodey = params['nelemy']+1;
    
    assert (ntotal >= (ntrain+nvalid+ntest)),'Number of examples not sufficient'

    train_data = read_data(0,ntrain,prefix,nnodex,nnodey);
    valid_data = read_data(ntrain,ntrain+nvalid,prefix,nnodex,nnodey);
    test_data  = read_data(ntrain+nvalid,ntotal,prefix,nnodex,nnodey);
               
    return train_data,valid_data,test_data

def read_data(start,stop,prefix,nnodex,nnodey):
    # get ndime - better be consistent across all training examples.
    inputname  = prefix+'0/input0.json.in';
    with open(inputname,'r') as fin:
        dd    = json.load(fin)
        ndime = dd['ndime']
        coord = np.asarray(dd['coord'])
        # do not .reshape(nnodey,nnodex)
        xx    = coord[:,0].reshape(nnodex,nnodey).T
        yy    = coord[:,1].reshape(nnodex,nnodey).T
    
    nexamples    = stop - start
    images       = np.empty((nexamples,nnodey,nnodex,ndime),dtype='float64')
    binary_label = np.empty((nexamples,),dtype='int64')
    center_label = np.empty((nexamples,2),dtype='float64')
    radius_label = np.empty((nexamples,),dtype='float64')
    mu_label     = np.empty((nexamples,),dtype='float64')
    
    # iloc is training example, ii is file suffix
    for iloc,ii in enumerate(range(start,stop)):

        mlinfoname = prefix+str(ii)+'/mlinfo'+str(ii)+'.json.in';
        outputname = prefix+str(ii)+'/output'+str(ii)+'.json.out';
        outsolx    = prefix+str(ii)+'/uxml'+str(ii)+'.png';
        outsoly    = prefix+str(ii)+'/uyml'+str(ii)+'.png';
        
        with open(mlinfoname,'r') as fin:
            dd = json.load(fin)
            binary_label[iloc] = dd['label'][0]
            center_label[iloc] = np.asarray(dd['centers'])  # assume only one inclusion
            radius_label[iloc] = dd['radii'][0]
            mu_label[iloc]     = dd['mu']

        # get solution (displacement data)
        with open(outputname,'r') as fin:
            dd   = json.load(fin)
            sol  = np.asarray(dd['solution'])
            # do not reshape.(nnodey,nnodex)
            solx = sol[:,0].reshape(nnodex,nnodey).T
            soly = sol[:,1].reshape(nnodex,nnodey).T
            images[iloc,:,:,0] = solx
            images[iloc,:,:,1] = soly

        # plotfield(xx,yy,images[iloc,:,:,0],'ux',outsolx)
        # plotfield(xx,yy,images[iloc,:,:,1],'uy',outsoly)

    pass

def forward_scale_data():
    pass

def inverse_scale_data():
    pass

def define_cnn():
    ndim = 2 # number of displacement components.
    cnn = None
    return cnn

def welcome():
    print('-'*85)
    print(message)
    print('-'*85)

def goodbye():
    print('-'*80)
    print('Exiting gracefully ... goodbye!')
    print('-'*80)

def plotfield(xx,yy,field,title,fname):
    plt.figure(title)
    plt.pcolormesh(xx,yy,field)
    plt.title(title)
    plt.colorbar()
    ax = plt.gca()
    ax.set_aspect('equal')
    plt.savefig(fname)
    plt.close()


if __name__ =='__main__':
    welcome()
    args      = get_args()                             # get the args namespace
    params    = get_params(args.inputfile)             # get the params dictionary
    newparams = update_params(params=params,args=args) # override parameters in params with those in args
    
    train_data,valid_data,test_data = get_data(params=newparams)
    
    cnn       = define_cnn()
    goodbye()

